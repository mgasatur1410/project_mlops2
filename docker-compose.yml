services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transactions --partitions 1 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic scores --partitions 1 --replication-factor 1
      "

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: frauddb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  csv-loader:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: csv-loader
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    volumes:
      - ./input:/app/input
    command: python scripts/csv_to_kafka.py --bootstrap-servers kafka:9092 --topic transactions --csv-path input/test.csv --delay 0.1
    restart: on-failure

  scoring-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scoring-service
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    volumes:
      - ./model:/app/model
      - ./output:/app/output
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_INPUT_TOPIC: transactions
      KAFKA_OUTPUT_TOPIC: scores
      KAFKA_GROUP_ID: fraud-scoring-service
      MODEL_PATH: model/catboost_model.cbm
    restart: on-failure

  db-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: db-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: frauddb
      DB_USER: postgres
      DB_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_SCORES_TOPIC: scores
      KAFKA_GROUP_ID: db-service
    command: python scripts/db_service.py
    restart: on-failure

  web-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web-app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: frauddb
      DB_USER: postgres
      DB_PASSWORD: postgres
      WEB_HOST: 0.0.0.0
      WEB_PORT: 5000
    volumes:
      - ./scripts/templates:/app/scripts/templates
    command: python scripts/web_app.py
    restart: on-failure

volumes:
  postgres-data: 